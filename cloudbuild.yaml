options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Fetch and decode service account key
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          set -e
          echo "Fetching service account key from Secret Manager..."
          gcloud secrets versions access latest --secret="cloudbuild-sa-key" > /tmp/encoded-key.b64
          echo "Base64 secret retrieved..."

          # Decode the Base64 secret
          base64 -d /tmp/encoded-key.b64 > /tmp/cloudbuild-sa-key.json || {
            echo "ERROR: Failed to decode the Base64 secret."
            exit 1
          }
          echo "Service account JSON key decoded successfully."

          # Check if the JSON is valid
          if [ ! -s /tmp/cloudbuild-sa-key.json ]; then
            echo "ERROR: Secret file /tmp/cloudbuild-sa-key.json is empty or invalid."
            exit 1
          fi

          echo "Authenticating using the service account..."
          gcloud auth activate-service-account --key-file=/tmp/cloudbuild-sa-key.json || {
            echo "ERROR: Authentication failed."
            exit 1
          }

  # Step 2: Build Docker images for superheroes
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          set -e
          echo "Building and pushing Docker images for superheroes..."
          for group in $(seq -w 1 8); do
            for hero in $(seq -w 1 5); do
              hero_name="superhero-0${group}-0${hero}"
              image="gcr.io/${_PROJECT_ID}/${hero_name}-${BUILD_ID}:latest"
              dir="./superheroes/${hero_name}"  # Define the expected directory
              if [ -d "${dir}" ]; then
                echo "Directory found: ${dir}. Building image for ${hero_name}..."
                docker build --no-cache -t "${image}" "${dir}" && \
                echo "Successfully built image for ${hero_name}."
                echo "Pushing image for ${hero_name} to GCR..."
                docker push "${image}" && \
                echo "Successfully pushed image for ${hero_name}."
              else
                echo "Directory not found: ${dir}. Skipping ${hero_name}."
              fi
            done
          done

  # Step 3: Deploy individual Cloud Run services for superheroes
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          set -e
          echo "Deploying Cloud Run services for superheroes..."
          for group in $(seq -w 1 8); do
            for hero in $(seq -w 1 5); do
              service_name="superhero-0${group}-0${hero}"
              image="gcr.io/${_PROJECT_ID}/${service_name}-${BUILD_ID}:latest"
              service_account="superhero-0${group}-0${hero}@${_PROJECT_ID}.iam.gserviceaccount.com"
              dir="./superheroes/${service_name}"  # Directory check before deployment
              if [ -d "${dir}" ]; then
                echo "Directory found: ${dir}. Deploying ${service_name}..."
                gcloud run deploy "${service_name}" \
                  --image="${image}" \
                  --region="europe-west1" \
                  --platform=managed \
                  --allow-unauthenticated \
                  --service-account="${service_account}" \
                  --timeout=900s || exit 1
              else
                echo "Directory not found: ${dir}. Skipping ${service_name}."
              fi
            done
          done

  # Step 4: Deploy backend services
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          set -e
          echo "Deploying backend services..."
          for service in avengers-backend xmen-backend jarvis vault; do
            service_name="${service}-${_PROJECT_ID}"
            image="gcr.io/${_PROJECT_ID}/${service}-${BUILD_ID}:latest"
            service_account="cloud-build-sa@${_PROJECT_ID}.iam.gserviceaccount.com"
            dir="./backends/${service}"  # Directory check for backend services
            if [ -d "${dir}" ]; then
              echo "Directory found: ${dir}. Deploying ${service_name}..."
              gcloud run deploy "${service_name}" \
                --image="${image}" \
                --region="europe-west1" \
                --platform=managed \
                --allow-unauthenticated \
                --service-account="${service_account}" \
                --timeout=900s || exit 1
            else
              echo "Directory not found: ${dir}. Skipping ${service_name}."
            fi
          done

  # Step 5: Apply Terraform configuration with $BUILD_ID
  - name: 'hashicorp/terraform:light'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
          set -e
          echo "Applying Terraform configuration with image identifier ${BUILD_ID}..."
          terraform init
          terraform apply -auto-approve -var="image_timestamp=${BUILD_ID}"

  # Step 6: Trigger the next Cloud Build pipeline (if applicable)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
          echo "Triggering the next Cloud Build..."
          gcloud builds submit . --config cloudbuild.yaml

substitutions:
  _PROJECT_ID: "hero-alliance-feup-ds-24-25"
