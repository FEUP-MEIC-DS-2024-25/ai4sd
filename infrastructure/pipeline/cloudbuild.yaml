# Cloud Build Configuration
options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _PROJECT_ID: "hero-alliance-feup-ds-24-25"
  _FALLBACK_IMAGE: "gcr.io/hero-alliance-feup-ds-24-25/testapp"
  _BUCKET_NAME: "hero-alliance-state"
  _REGION: "europe-west1"
  _JARVIS_APP_ID: "1063506"
  _GITHUB_ORG: "FEUP-MEIC-DS-2024-25"

steps:

  # Step 1: Fetch the latest updated merged PR number and set it as an environment variable
  - id: "Fetch Last Updated Merged PR"
    name: "gcr.io/cloud-builders/curl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          echo "Installing jq..."
          apt-get update && apt-get install -y jq
          echo "Fetching the last updated merged PR ID..."
          curl -s \
            "https://api.github.com/repos/FEUP-MEIC-DS-2024-25/ai4sd/pulls?state=closed&base=main&sort=updated&direction=desc" | \
            jq -r '[.[] | select(.merged_at != null)] | first | .number' > /workspace/pr_id.txt
          echo "PR_ID=$(cat /workspace/pr_id.txt)"



  # Step 2: Fetch and activate the service account key
  - id: "Fetch and Activate Service Account Key"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          echo "Fetching and activating the Cloud Build service account key..."
          gcloud secrets versions access latest --secret="cloudbuild-sa-key" --project="${_PROJECT_ID}" > /tmp/cloudbuild-sa-key.b64
          base64 --decode /tmp/cloudbuild-sa-key.b64 > /tmp/cloudbuild-sa-key.json
          gcloud auth activate-service-account --key-file=/tmp/cloudbuild-sa-key.json

  # Step 3: Authenticate Docker with Google Cloud
  - id: "Authenticate Docker"
    name: "gcr.io/cloud-builders/gcloud"
    args: ["auth", "configure-docker"]

  # Step 4: Sync Avengers folder to Cloud Storage bucket
  - id: "Sync Avengers Folder to Bucket"
    name: "gcr.io/cloud-builders/gsutil"
    args:
      - "rsync"
      - "-r"
      - "./avengers/"
      - "gs://hero-alliance-avengers"

  # Step 5: Reinitialize Terraform
  - id: "Initialize Terraform"
    name: "hashicorp/terraform"
    entrypoint: "sh"
    args:
      - "-c"
      - |
          echo "Initializing Terraform..."
          cd infrastructure/terraform
          terraform init -backend-config="bucket=${_BUCKET_NAME}" -backend-config="prefix=terraform/state"

  # Step 6: Terraform Refresh
  - id: "Terraform Refresh"
    name: "hashicorp/terraform"
    entrypoint: "sh"
    args:
      - "-c"
      - |
          echo "Refreshing Terraform state..."
          cd infrastructure/terraform
          terraform refresh -var "build_id=${BUILD_ID}"

  # Step 7: Terraform Plan
  - id: "Terraform Plan"
    name: "hashicorp/terraform"
    entrypoint: "sh"
    args:
      - "-c"
      - |
          echo "Running Terraform Plan..."
          cd infrastructure/terraform
          terraform plan -out=tfplan -var "build_id=${BUILD_ID}" -refresh-only

  # Step 8: Terraform Apply
  - id: "Terraform Apply"
    name: "hashicorp/terraform"
    entrypoint: "sh"
    args:
      - "-c"
      - |
          echo "Applying Terraform Plan..."
          cd infrastructure/terraform
          terraform apply -auto-approve tfplan

  # Step 9: Build and Push Docker Images for Superheroes
  - id: "Build and Push Docker Images"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |

          echo "Installing jq..."
          apt-get update && apt-get install -y jq

          echo "Fetching PR_ID from file..."
          echo "PR_ID: $(cat /workspace/pr_id.txt)"

          echo "Fetching changed superhero directories from the pull request..."

          changed_dirs=$(curl -s "https://api.github.com/repos/FEUP-MEIC-DS-2024-25/ai4sd/pulls/367/files" | \
          jq -r '.[].filename' | awk -F/ '/^superheroes/ {print $1"/"$2}' | sort | uniq)

          echo "Changed superhero directories: $changed_dirs"

          echo "Building and pushing Docker images for changed superhero services..."
          for dir in $changed_dirs; do
              hero_name=$(basename "$dir")
              dockerfile="${dir}/Dockerfile"
              image="gcr.io/${_PROJECT_ID}/${hero_name}"
              image_with_build_id="${image}-${BUILD_ID}"

              if [ -f "${dockerfile}" ]; then
                echo "Fetching secret for ${hero_name}..."
                secret_file="/tmp/${hero_name}_secret"

                gcloud secrets versions access latest \
                  --secret="${hero_name}-secret" \
                  --project="${_PROJECT_ID}" > "${secret_file}"

                echo "Building image for ${hero_name}..."
                if DOCKER_BUILDKIT=1 docker build --secret id=secret,src="${secret_file}" -t "${image_with_build_id}" "${dir}"; then
                  echo "Pushing image for ${hero_name}..."
                  docker push "${image_with_build_id}" || echo "Failed to push image for ${hero_name}. Skipping."
                else
                  echo "Failed to build image for ${hero_name}. Skipping."
                fi
                
                rm -rf "${secret_file}"
              else
                echo "No Dockerfile found in ${dir}, skipping build."
                sleep 10  # Wait for GCR image propagation
              fi
          done

  # Step 10: Build and Push Docker Images for Jarvis and Strange
  - id: "Build and Push Jarvis and Strange"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          echo "Building and pushing Docker images for jarvis and strange..."
          for service in jarvis strange; do
            dir="./${service}"
            dockerfile="${dir}/Dockerfile"
            image="gcr.io/${_PROJECT_ID}/${service}"
            image_with_build_id="${image}-${BUILD_ID}"

            if [ -f "${dockerfile}" ]; then

                echo "Fetching secret for jarvis..."

                jarvis_secret=$(gcloud secrets versions access latest \
                --secret="jarvis-secret" \
                --project="${_PROJECT_ID}")

              echo "Building image for ${service}..."
              if docker build --build-arg SERVICE_ACCOUNT_KEY="${jarvis_secret}" -t "${image_with_build_id}" "${dir}"; then
                echo "Pushing image for ${service}..."
                docker push "${image_with_build_id}" || echo "Failed to push image for ${service}. Skipping."
              else
                  echo "Failed to build image for ${service}. Skipping."
              fi
              
            else
              echo "No Dockerfile found for ${service}, using fallback image."
            fi
          done

  # Step 11: Deploy Services to Cloud Run
  - id: "Deploy to Cloud Run"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          echo "Deploying services to Cloud Run..."
          for service in jarvis strange; do
            image="gcr.io/${_PROJECT_ID}/${service}-${BUILD_ID}"
            fallback_image="${_FALLBACK_IMAGE}"

            echo "Deploying ${service}..."
            if gcloud container images describe "${image}" --project="${_PROJECT_ID}" > /dev/null 2>&1; then
              if [ "$service" == "jarvis" ]; then
                gcloud run deploy "${service}" \
                  --image="${image}" \
                  --platform=managed \
                  --region="${_REGION}" \
                  --project="${_PROJECT_ID}" \
                  --allow-unauthenticated \
                  --set-env-vars "APP_ID=${_JARVIS_APP_ID}, GITHUB_ORG=${_GITHUB_ORG}"
              else
                gcloud run deploy "${service}" \
                  --image="${image}" \
                  --platform=managed \
                  --region="${_REGION}" \
                  --project="${_PROJECT_ID}" \
                  --allow-unauthenticated
              fi
            else
              echo "Image for ${service} not found, deploying using fallback image."
              gcloud run deploy "${service}" \
                --image="${fallback_image}" \
                --platform=managed \
                --region="${_REGION}" \
                --project="${_PROJECT_ID}" \
                --allow-unauthenticated
            fi
          done

          # Deploy superheroes
          for group in $(seq -w 1 8); do
            for hero in $(seq -w 1 5); do
              hero_name="superhero-0${group}-0${hero}"
              image="gcr.io/${_PROJECT_ID}/${hero_name}-${BUILD_ID}"
              fallback_image="${_FALLBACK_IMAGE}"

              echo "Deploying ${hero_name}..."
              if gcloud container images describe "${image}" --project="${_PROJECT_ID}" > /dev/null 2>&1; then
                gcloud run deploy "${hero_name}" \
                  --image="${image}" \
                  --platform=managed \
                  --region="${_REGION}" \
                  --project="${_PROJECT_ID}" \
                  --allow-unauthenticated
              else
                echo "Image for ${hero_name} not found, deploying using fallback image."
                gcloud run deploy "${hero_name}" \
                  --image="${fallback_image}" \
                  --platform=managed \
                  --region="${_REGION}" \
                  --project="${_PROJECT_ID}" \
                  --allow-unauthenticated
              fi
            done
          done

  # Step 12: Verify Deployment
  - id: "Verify Deployment"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
          echo "Verifying deployed services..."
          gcloud run services list --platform=managed --region="${_REGION}" --project="${_PROJECT_ID}"
