import { URL } from 'url';
import { ChildProcessProxy } from '../child-proxy/child-process-proxy.js';
import { CheckerWorker } from './checker-worker.js';
export class CheckerChildProcessProxy {
    childProcess;
    constructor(options, fileDescriptions, pluginModulePaths, loggingContext, idGenerator) {
        this.childProcess = ChildProcessProxy.create(new URL('./checker-worker.js', import.meta.url).toString(), loggingContext, options, fileDescriptions, pluginModulePaths, process.cwd(), CheckerWorker, options.checkerNodeArgs, idGenerator);
    }
    async dispose() {
        await this.childProcess.dispose();
    }
    async init() {
        await this.childProcess.proxy.init();
    }
    async check(checkerName, mutants) {
        return this.childProcess.proxy.check(checkerName, mutants);
    }
    async group(checkerName, mutants) {
        return this.childProcess.proxy.group(checkerName, mutants);
    }
}
//# sourceMappingURL=checker-child-process-proxy.js.map