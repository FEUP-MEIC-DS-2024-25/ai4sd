var n;!function(n){n[n.Millisecond=1]="Millisecond",n[n.Second=1e3]="Second",n[n.Minute=6e4]="Minute",n[n.Hour=36e5]="Hour",n[n.Day=864e5]="Day",n[n.Month=2592e6]="Month",n[n.Year=31536e6]="Year"}(n||(n={}));const t=["string","bigint","number","boolean"];function r(n){return Object.entries(n)}function e(n){return Object.values(n)}function o(n){return Object.keys(n)}function u(n){return null!=n}function c(n){return new Promise(t=>setTimeout(t,n))}function i(){}const f=(n,t)=>{let r=null;return(...e)=>{null!==r&&(clearTimeout(r),r=null),r=setTimeout(()=>n(...e),t)}};function s(n){return!("object"!=typeof n||!n)&&n.constructor===Object}function a(n){return t.includes(typeof n)}function l(n){return"function"==typeof n}function h(n){if(null===n||a(n))return n;if(Array.isArray(n)){const t=[];for(const r of n)t.push(h(r));return t}if(s(n)){const t={};for(const[r,e]of Object.entries(n))t[r]=h(e);return t}if(n instanceof Map){const t=new n.constructor;for(const[r,e]of n.entries())t.set(r,h(e));return t}if(n instanceof Set){const t=new n.constructor;for(const r of n.values())t.add(h(r));return t}return n}function M(n,t){return 100*n/t}function m(n,t){return n*t/100}function d(n,t){return t<=0?n:n-n*(t/100)}function b(n,t){return t<=0?n:n+n*(t/100)}function p(n){return n[Math.floor(Math.random()*n.length)]}function g(n,t){if(t<1)throw new RangeError("chunkSize must be 1 or greater.");if(!Number.isInteger(t))throw new TypeError("chunkSize must be an integer.");const r=n.slice(),e=[];for(;r.length;)e.push(r.splice(0,t));return e}function w(n){return[...new Set(n)]}function y(n){return n.reduce((n,t)=>n+t,0)}function j(n){let t=[...n];for(let n=t.length-1;n>0;n--){const r=Math.floor(Math.random()*(n+1));[t[n],t[r]]=[t[r],t[n]]}return t}function S(n,t){const r=[],e=[];for(const o of n)(t(o)?r:e).push(o);return[r,e]}function O(n,t){return n.filter(n=>n!==t)}function T(n,t){return Math.floor(Math.random()*(t-n+1)+n)}function k(n,t){return Math.random()*(t-n)+n}function v(n){return 1===T(1,n)}function z(n){return k(0,100)<n}function A(n,t=1){const r=Math.pow(10,t||0);return Math.round(n*r)/r}function x(n,t,r){return Math.min(r,Math.max(t,n))}function D(n,t,r,e,o){return(n-t)*(o-e)/(r-t)+e}function E(n){return n.replace(/[^a-zA-Z0-9]/g,"")}export{n as Time,m as calcPercentOfNum,M as calcWhatPercent,g as chunk,x as clamp,f as debounce,h as deepClone,b as increaseNumByPercent,l as isFunction,s as isObject,a as isPrimitive,i as noOp,u as notEmpty,r as objectEntries,o as objectKeys,e as objectValues,S as partition,z as percentChance,t as primitiveTypes,p as randArrItem,k as randFloat,T as randInt,d as reduceNumByPercent,O as removeFromArr,v as roll,A as round,D as scaleNumber,j as shuffleArr,c as sleep,E as stripNonAlphanumeric,y as sumArr,w as uniqueArr};
//# sourceMappingURL=index.es.mjs.map
