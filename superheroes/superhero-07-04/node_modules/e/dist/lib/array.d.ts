/**
 * Picks a random item from an array.
 * @param array The array to pick from.
 */
export declare function randArrItem<T>(array: readonly T[]): T;
/**
 * Splits up an array into chunks
 * @param array The array to chunk up
 * @param chunkSize The size of each individual chunk
 */
export declare function chunk<T>(array: readonly T[], chunkSize: number): T[][];
/**
 * Returns a copy of an array with duplicates removed.
 *
 * @param arr The array to copy and remove duplicates from.
 */
export declare function uniqueArr<T>(arr: readonly T[]): T[];
/**
 * Returns the sum of an array of numbers.
 *
 * @param arr The array of numbers to sum.
 */
export declare function sumArr(arr: readonly number[]): number;
/**
 * Returns a shuffled copy of an array.
 *
 * @param array The array to shuffle.
 */
export declare function shuffleArr<T>(array: readonly T[]): T[];
/**
 *
 * @param arr The array to partition
 * @param filter The filter by which to partition the array
 */
export declare function partition<T>(arr: T[], filter: (item: T) => boolean): [T[], T[]];
export declare function removeFromArr<T>(arr: T[] | readonly T[], item: T): T[];
//# sourceMappingURL=array.d.ts.map